==Refs
Compiler construction,
http://lambda.uta.edu/cse5317/fall02/notes/notes.html

Java bytecode,
http://docs.oracle.com/javase/specs/jvms/se7/html/

NASM documentation,
http://www.nasm.us/xdoc/2.12.02/html/nasmdoc0.html


http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf

== ideas
stubs

Idea is, to allow 'any' type for prototpying and easy internals, but highly detailed types, even differentiated types, for use near APIs.
- Can drop naturally to untyped Any, even removing type. 
- Have a type rename, also. FULL, incompatible
strict scoping?
goto methods, unscoped methods?
COMEFROM, and auto debugger?
monads = type in = type out? Or bind. And construction/'unit' funcs
...or define chains of expressinfg actions. As opposed to iterators, and short cuircuits? How is a short circuit in Haskel? How to do that in LISP notation?
literate programming switch and converter
genrics, defo
options, yes! and other types. Checked and optomising unchecked.
not nested classes, but an indication/annotation for nesting (what about complementary objects? So use naming?)
The above also suggests using function calls for 'else' in if/else
TempleOS documentation?
if can only use else with method?
Converters from C and Python
Nice if ''from, to, until' not keywords
Yes to camelCase
Scala type testing. Ans please, please, let me RUN it.
If we do get a true converter, how about a Python-maintained second version, for general use?
Most good code has a logger... whats the difference t a printer? Should it be in libraries? Should it be built in?
== typed documentation
#! TODO
#? TOCONSIDER
#!!! TODO in future
#(!  or ?)ok done
#x deprecated
#?x deprecated

== Design
1 Python not Ruby
2 lexer
3 parser
4 parser with tree
5 symbols/atoms shou;ld be tree units


== Literals
Enums can be done by symbol vals in a namespace?
Codepoints, do we need them? Set them by an imported Enum if needed.

== Operators

> greater
>> move left
>>> type?

! not

= eq
== allocate
=== type?

+ - * %
+ add
++ inc

- minus
-- dec

* multiply
** power

% divide
%% power -1

index???

## grammar
parameter definitions take new symbols for use within. Parameter usage takes existing symbols for specialization of the contents.

def zaa!(): int
   ...
end

Short for e.g.

def (zaa!(): int (
   ...
)
)

as is

val zee! 88

short for e.g.

val (zee!(): int (88))

== Splicecode
+pro
Cleans the tree for easy checking of output
would stay reasonably stable across versions, so some binary compatibility?
Fast to compile from
No headers

+against
Not good for different architectures
Unecessary generation- can go direct to machine code from tree
Not portable
headers and compiled files faster

#! Could we replace headers? With one file?
